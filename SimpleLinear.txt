import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import RobustScaler
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

# Load the dataset
file_path = '/content/weatherHistory.csv'
df = pd.read_csv(file_path)

# Select only the columns of interest (Temperature and Humidity)
data = df[['Temperature (C)', 'Humidity']]

# Drop any rows with missing values
data = data.dropna()

# Robust Scaling to handle outliers
scaler = RobustScaler()
data_scaled = scaler.fit_transform(data)

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(data_scaled[:, 0].reshape(-1, 1), data_scaled[:, 1], test_size=0.2, random_state=42)

# Create a linear regression model
model = LinearRegression()

# Fit the model on the training data
model.fit(X_train, y_train)

# Make predictions on the test data
y_pred = model.predict(X_test)

# Calculate the sum of errors
sum_of_errors = sum(y_test - y_pred)

# Calculate the mean squared error (MSE)
mse = mean_squared_error(y_test, y_pred)

# Print the sum of errors and MSE
print('Sum of Errors:', sum_of_errors)
print('Mean Squared Error (MSE):', mse)

# Print the coefficients and intercept
print('Coefficient:', model.coef_[0])
print('Intercept:', model.intercept_)

# Plot the results
plt.scatter(X_test, y_test, color='black', label='Actual data')
plt.plot(X_test, y_pred, color='blue', linewidth=3, label='Linear regression line')
plt.xlabel('Scaled Temperature')
plt.ylabel('Scaled Humidity')
plt.title('Simple Linear Regression: Scaled Temperature vs Scaled Humidity')
plt.legend()
plt.show()
print(f'Regression Equation: Humidity = {model.coef_[0]:.4f} * Scaled_Temperature + {model.intercept_:.4f}')
